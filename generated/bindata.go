// Code generated by go-bindata.
// sources:
// scripts/backupDedicated.sh
// scripts/backupShared.sh
// scripts/restoreDedicated.sh
// scripts/restoreShared.sh
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBackupdedicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x53\x4d\x8f\xd3\x30\x10\x3d\x93\x5f\x31\x84\x48\x0b\x87\xac\xe9\x72\xe0\xd4\x43\x91\x0a\x42\xea\xad\x88\x0b\xa0\x6a\xe2\x4c\x12\xab\xa9\x1d\x3c\x4e\x83\x54\xf5\xbf\xe3\xb4\x69\x3e\x4a\x55\x4e\xa0\x55\xa4\xc8\x9e\x8f\x37\xef\x3d\x6b\x5e\xbd\x14\x89\xd2\x22\x41\x2e\x82\x8f\x9f\x57\xcb\x79\x28\xf6\x68\xc5\x5e\x62\x25\xd8\x19\x4b\xc2\x52\xaa\x38\x0c\x54\x06\xdf\x20\x6e\x20\x8c\xda\xb2\x73\xf4\x51\x1a\x9d\x85\xf0\x23\x70\x05\xe9\x00\xe0\x14\xdc\x48\xb3\xdb\xa1\x4e\xe7\xd1\x6b\x6c\xb6\xf0\xe0\x4b\x35\xee\x28\xee\xc2\xf0\xe1\xd3\x7a\xf1\x75\x29\x0e\x95\x55\xda\x41\xf4\xee\xf8\x00\xd7\x90\x6f\x7a\xac\xca\x58\xd7\x03\xb5\x97\xbe\xef\xe9\x7e\x5f\x33\x9e\xff\xb3\x56\x96\x2a\x64\xfe\x6b\x37\xc9\xc2\x40\xa8\x98\x6b\xa5\x73\x28\x91\xdd\x86\x71\x4f\xa1\x4f\xf5\x17\x0f\x3c\x78\x54\xa1\xdc\x62\x4e\x7c\xc6\x39\x79\x79\x3a\xc5\xb2\x54\x10\x17\x30\x7b\x7a\xff\xf8\xd6\x7f\x33\x88\x2b\x88\x06\x51\x10\x63\x7f\x6d\x52\x58\x2d\xd6\x5f\x5a\x5b\x06\x0e\x96\xb8\x2e\x1d\x98\x6c\x18\x0c\xd1\x84\x10\x97\x44\x15\xcc\xfe\x60\x9d\xe4\xe7\x6a\xe4\xcb\x84\xce\xfa\xb6\xa9\x4b\xfe\x0b\x0d\xd1\x61\x32\x4d\x88\xef\xa1\x38\xde\x12\x74\x21\x18\x75\x87\x7b\x62\x26\x8a\x35\x35\x9b\xe7\xf0\x0c\x13\x1e\x2d\xb1\x5a\x3b\x55\xfa\xfd\x98\x66\x20\xce\xdd\xe8\xcd\xfc\x9e\x00\xa4\xc6\xff\xc6\x72\xff\xb3\xaa\x8b\x2e\x59\x90\xdc\x4e\x0c\x1e\x33\xc5\x1c\x95\x66\x77\x43\x69\x6a\x34\x05\x54\x32\xf5\x0e\x5d\xaf\x11\x28\x06\x6d\x1c\x34\x56\x39\x4c\x4a\xdf\xf5\x82\x7e\x29\xe7\xc5\x66\x2a\xf8\x1d\x00\x00\xff\xff\x34\x1f\x6a\x77\x6f\x04\x00\x00")

func scriptsBackupdedicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupdedicatedSh,
		"scripts/backupDedicated.sh",
	)
}

func scriptsBackupdedicatedSh() (*asset, error) {
	bytes, err := scriptsBackupdedicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupDedicated.sh", size: 1135, mode: os.FileMode(420), modTime: time.Unix(1460742164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsBackupsharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x0c\x21\xd2\x02\x92\xd7\x74\x39\x70\x58\x71\x58\xa4\x05\x21\xed\x01\x69\x11\x97\xa5\xaa\x26\xce\x24\xb1\x9a\xda\xc1\xe3\x34\x48\xab\xfd\xef\xa4\x49\x9a\x8f\xd2\xa2\x72\x40\x90\x1e\x5a\xdb\xf3\xde\xbc\xf7\xa6\xce\xf3\x67\x32\xd6\x46\xc6\xc8\x79\x40\x2a\xb7\x10\x7e\x76\x56\x11\xb3\x36\x19\xc8\x2d\x3a\xb9\x55\x58\x4a\xf6\xd6\x91\x54\xa9\x70\x94\x68\x16\xb1\xb3\x6b\x72\xb2\x5b\x24\xe8\x51\x86\x41\x6a\x1d\x7c\xf8\x74\x77\x0b\xda\xfc\x09\xf0\xd5\x35\x24\x36\x80\xe6\xd1\x29\x3c\x3c\x80\x48\x20\x6a\x69\x96\xcb\x6b\xf0\x39\x99\xf6\x0c\xa0\x13\x57\x8e\xe2\xda\xaa\xb0\x3f\x6d\xc1\x20\x6a\x08\xdb\xed\xae\xc1\xa5\xb2\x26\x0d\x61\xce\xd3\x3c\xed\xe1\x4a\xd9\xcd\x06\x4d\xf2\x2e\x7a\x81\xf5\x1a\x2e\x1a\x88\xc1\x0d\x89\x7e\x1b\xde\x7f\xbc\xbf\xf9\x7a\x2b\x1f\x4b\xa7\x8d\x87\xe8\xcd\xd3\x05\x1c\x52\xbf\x3c\xa4\x2c\xad\xf3\x03\xdf\x6e\x31\xc0\xaf\xce\x82\xd7\x53\x35\xdf\x2b\xed\xa8\x44\xe6\x73\x49\xba\x84\x34\x73\xb5\x8b\xa7\x40\xf6\x2b\xc6\x2d\x85\x63\xc5\xb0\xd7\xb4\x19\x47\x54\xa2\x5a\x63\x46\xdc\xb1\xb6\x7f\x87\x6e\x3e\xaa\xd0\x20\x72\x58\x5c\xbd\xbd\x7c\xdd\x7c\x16\x20\x4a\x88\x46\xa7\x20\x70\x58\xd6\x09\xdc\xdd\xdc\x7f\xd9\x45\xf6\x8b\x22\x47\x5c\x15\x1e\x6c\x3a\xf6\x87\xe8\x98\x3c\x2e\x88\x4a\x58\x9c\x72\x14\x67\x1d\x16\x79\xdf\xb6\x9f\xd5\x84\xa2\xaf\xf9\x1b\xfe\xa2\xc7\x59\x53\x29\xbf\x85\xf2\xe9\x37\x66\xf7\x72\xa3\xfe\xc7\xf9\x46\x8f\x65\x63\xa8\x5e\xfd\x47\xe3\x9b\xc9\x99\xc8\xac\x8c\xd7\x45\x73\x13\xe7\x05\x20\x32\x3f\x19\x39\x2c\x47\x40\x7f\xf7\x4f\xe4\xf2\x4f\x6c\xf7\xbe\x55\x4e\x6a\x3d\x1b\xc7\xd4\x02\x66\xa8\x0d\xfb\xd3\x49\x24\xd6\xd0\xfe\xd5\x55\x30\x05\x73\xf2\xc3\x6b\x0c\x9a\xc1\x58\x0f\xb5\xd3\x1e\xe3\x62\x42\x44\x3f\xb4\x1f\x22\x49\x75\xd0\x7f\xb5\xf4\x3f\x03\x00\x00\xff\xff\xfe\xe3\x7f\xe8\xbd\x05\x00\x00")

func scriptsBackupsharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupsharedSh,
		"scripts/backupShared.sh",
	)
}

func scriptsBackupsharedSh() (*asset, error) {
	bytes, err := scriptsBackupsharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupShared.sh", size: 1469, mode: os.FileMode(420), modTime: time.Unix(1460743473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestorededicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4d\x6f\x13\x31\x10\xbd\xfb\x57\x4c\x37\x51\x42\x90\x1c\x27\x39\x14\x21\x48\x25\x10\x05\xf5\x44\x15\x90\x38\x20\xb4\x72\xec\x49\xd6\xca\xae\xed\xda\xde\x84\x0a\xf8\xef\x78\x37\x1f\xcd\x56\x4d\x52\x44\x0f\x4d\x0e\xab\xb1\xdf\x7c\xf9\xcd\x9b\xd6\x19\x9b\x2a\xcd\xa6\xdc\x67\x24\x70\x37\xc7\x90\x4a\xe5\xc6\x6c\xc9\x1d\x5b\x0a\x6e\x99\x0f\xc6\x21\x73\x28\x95\x27\x42\xc2\xfd\x8b\x50\xd8\x74\xca\xc5\xa2\xb4\x0c\x3a\x1d\x88\x21\xe0\xe7\x72\x76\x0c\x56\x87\xa2\x41\xe5\xd8\xaf\xd0\x17\xc0\x24\x2e\x99\x2e\xf3\x1c\x46\x17\x9d\x21\x41\x91\x19\x48\x26\x58\x39\x2a\x3d\x87\x1a\x9f\x90\xfa\x93\x5a\xe3\xc2\xb8\xfd\x82\xaf\x16\xd0\x65\x95\xc1\x7e\xd9\x88\x0a\xd0\x1e\xfd\xe9\x42\xfb\xae\x83\x75\x9a\xbe\x30\x7a\xd6\xdb\xfa\xae\xe4\xce\xd5\xe1\x4d\xa9\x1c\x5a\xee\xfd\xa3\x22\x5c\x5f\x7d\x88\xbe\xac\xf4\xae\x7e\x2e\x3b\x8f\xbe\xeb\xca\xa8\x47\xb7\x44\xd7\x23\x0b\x15\x3b\xa0\xaf\xa1\x1d\xb1\xa4\xd5\x02\x8f\x01\x82\x01\x6e\x2d\x6a\x69\x74\x7e\x0b\xda\x10\x8f\x12\xa8\x82\xae\x67\x7b\xe7\xb7\xd8\x30\xb5\x61\xf3\x43\x95\xec\x05\x70\xa8\x79\x81\x54\x98\xa2\xe0\x5a\xc2\xfb\x4f\x93\xcb\x6f\x93\xab\xaf\x97\xef\x3e\x7f\x84\x24\x39\x7e\xbd\x6f\x25\x47\xb2\xb9\x02\xa8\x9b\x35\x6e\x5f\xf6\xb9\x39\x70\xe1\xe4\x94\x08\x7b\x92\x7b\x26\xcb\xc2\x56\xe0\x86\x7b\x9f\x88\xac\x30\x12\xce\xcf\x07\x8d\xf3\x2d\x98\x90\x55\x16\x67\x06\xce\x40\x0b\xa0\x37\x30\x84\xdc\x08\x9e\x67\xc6\x47\xea\xee\x86\x03\xde\xee\xc6\xe9\x0d\x48\x03\x3e\xc7\xc8\xd4\x70\x50\x19\x1a\x37\x23\x7e\xed\x4c\x24\xd0\xfb\x2f\x81\x87\xd2\x57\xc4\xee\x4a\xb6\xb1\x50\x3e\x47\xbf\x29\xb5\x22\x7b\x4d\xb3\xc8\x15\xd0\x0c\x86\xa3\x57\xfd\x41\xfc\x0f\x81\xda\x46\x5e\xca\x77\xe6\x4a\x82\xd2\x33\x03\xbf\xa1\x1e\x93\x6e\x7c\xb0\xd4\xe1\xca\xa9\x80\xa9\xd2\xa9\xdd\x64\xef\xf6\xc8\x93\xe7\xdd\x27\x96\xd8\xe7\xd2\x66\xa9\xa3\xdc\xe1\x3b\x24\xed\x66\x49\x09\x8c\xc7\xf1\xf0\x21\x52\x12\xf8\x41\xa4\x21\x10\x7f\xcf\xa6\x8d\xaa\x98\xcd\x3c\x91\x7a\x9a\xfe\x79\x2d\x3c\x28\xff\xa8\xf7\x7b\xcb\xe0\xbf\xe5\xdf\xd4\xf7\x89\x4d\x71\x38\xdb\x56\xe6\xa7\x14\xfd\x58\xdc\x6e\xeb\x93\xbf\x01\x00\x00\xff\xff\x5d\xe2\x8e\xbf\x77\x06\x00\x00")

func scriptsRestorededicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestorededicatedSh,
		"scripts/restoreDedicated.sh",
	)
}

func scriptsRestorededicatedSh() (*asset, error) {
	bytes, err := scriptsRestorededicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreDedicated.sh", size: 1655, mode: os.FileMode(420), modTime: time.Unix(1460041627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestoresharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5d\x4f\xdb\x4a\x10\x7d\xcf\xaf\x18\x8c\x45\x2e\x48\xce\x12\x1e\xb8\xba\xe2\x06\xa9\x15\x50\x21\x55\x2d\xa2\x95\xfa\x80\x50\xb4\xf1\x8e\xe3\x55\xec\xdd\x65\x77\x93\x80\xda\xfe\xf7\x8e\x6d\x92\xac\x43\x0a\xa9\x44\x25\x36\x0f\xc9\xc4\x67\xce\x7c\x78\xe6\xd8\xbb\x3b\x6c\x24\x15\x1b\x71\x97\x77\x3c\xb7\x63\xf4\x43\x21\xed\x80\xcd\xb8\x65\xb3\x94\x1b\xe6\xbc\xb6\xc8\xd2\x2c\xb1\x28\xa4\x4b\x46\x56\x4f\xd0\xb2\xc6\x10\xdc\x73\xd6\x49\x05\xac\xc3\x7d\x69\x86\x23\x9e\x4e\xa6\x86\xc1\xde\x1e\x10\x31\xdc\xcf\xb2\xe7\x60\x0d\xa1\x97\x05\xf6\x2a\xf4\x29\x30\x81\x33\xa6\xa6\x45\x01\x47\xa7\x7b\xfd\x4e\xa6\x2d\x5c\x5c\x7e\x3c\x07\xa9\x5e\xa6\xa9\xf3\x3a\x38\x01\xa1\x3b\x40\x47\x66\x70\x73\x03\x89\x80\xb8\x66\xb8\xbd\x3d\x01\x9f\xa3\xaa\xaf\xd1\xa1\x7a\x31\x25\xa2\x87\x4f\xbc\xc4\x41\xfc\x0f\xf5\x02\x15\xfd\x6c\xe0\xfb\x0b\x98\x54\xce\xf3\xa2\x38\xa3\xee\xc4\xab\x4e\xc5\x2d\xef\x25\x96\x22\x56\x01\xa3\x78\xe5\x15\xc1\x5a\x5c\x3a\x98\xe6\x1a\xa2\x6b\xac\xea\x90\x6a\x0c\x6d\xb6\x28\x40\xd6\x85\x0d\x8d\xb6\x9e\x32\xe4\xf3\x09\x74\x59\x65\xb0\xef\x86\x1c\x3d\xc4\x47\x3f\xbb\x10\x04\x6b\x1a\xd1\x4b\xb5\xca\xf6\x9f\xb2\xcc\xc5\x92\xc4\xe2\xdd\x94\x62\x1a\xee\xdc\x1f\x72\x5d\x5d\x9e\x11\x4b\xca\xfd\x53\x6c\xe2\xd0\xce\xd0\xf6\x8c\x14\xa1\xc7\x44\xd2\xdd\x4c\xfe\x83\x98\x5c\xc3\xa4\x4a\x48\x6c\xf6\x2c\x4b\x80\xde\xdd\x05\x87\x1e\xbc\x06\x6e\x0c\x2a\xa1\x55\xf1\x00\x4a\x07\x08\x87\x02\x12\x09\x5d\xc7\x02\xc4\x03\xb6\x4c\xa5\xd9\xf8\x77\x45\x6e\xa4\xb2\xf5\x48\x24\xa9\x2e\x4b\xae\x04\xbc\xff\x70\x7d\xfe\xed\xfa\xf2\xeb\xf9\xbb\xcf\x17\x10\x45\xcf\x5f\x0e\xad\x68\xab\xb8\x1b\x5a\x22\x46\xec\x20\x40\xa4\x66\xcb\x35\x68\x8f\x54\x45\x23\xa6\xa5\xe9\x59\x31\x5a\xa7\xef\x85\xf4\x79\xa9\x05\x1c\x1f\x1f\xae\x83\x16\xce\x9d\x00\x3c\xcf\x69\x6d\x61\x07\x54\x0a\xc9\x1d\xf4\xa1\xd0\x29\x2f\x72\xed\x68\x32\x56\x63\x0b\xff\x2f\x37\xba\x5a\x4c\x70\x05\xa2\x81\xfe\x61\x65\x28\x0c\xd8\x9a\xdd\xba\xb2\x7a\x6c\xd1\xb9\x2f\x9e\xfb\xa9\xa3\x41\x5b\x55\x6b\xa8\x46\x3e\x46\xd7\x54\x59\xcb\x57\x53\x6f\x5a\x48\x48\x72\xe8\x1f\xfd\xdb\x3b\xa4\x4f\x1f\x12\xd3\xca\x20\xe1\x4b\x73\x2e\x68\x9f\x33\x0d\x3f\x80\xa2\x18\xe8\x72\x9d\x0d\x2d\xce\xad\xf4\x38\x94\x6a\x68\x1e\xa3\x77\xc3\xf1\x7d\xf5\x0c\xc2\xb9\x08\xe2\x98\xb7\x57\xfa\x54\x91\x32\x93\xa4\x45\x71\x3b\xb9\x08\x06\x03\xfa\x73\xd3\x2d\x23\xb9\x0b\x08\x44\xb8\xa0\x6f\xb2\x44\x58\x4c\x64\x2b\x6b\x9a\xcc\xbf\x21\x79\x1b\x25\x8a\x34\x69\x4d\xb0\x5e\x51\xa2\xda\x1a\xf4\x82\x9a\xbd\x18\x17\x0b\x87\x4f\x1e\x63\x81\x0b\x75\x0e\x9d\xea\x7a\xc0\x7b\xe9\xfc\xf2\x39\x96\xc9\xce\xe3\x57\xdd\xd9\x47\x95\xdb\x4a\xc7\xb6\x06\x2f\x5e\x21\x3a\xbf\x02\x00\x00\xff\xff\xa3\xba\x4a\x39\xda\x08\x00\x00")

func scriptsRestoresharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestoresharedSh,
		"scripts/restoreShared.sh",
	)
}

func scriptsRestoresharedSh() (*asset, error) {
	bytes, err := scriptsRestoresharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreShared.sh", size: 2266, mode: os.FileMode(420), modTime: time.Unix(1460041633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/backupDedicated.sh": scriptsBackupdedicatedSh,
	"scripts/backupShared.sh": scriptsBackupsharedSh,
	"scripts/restoreDedicated.sh": scriptsRestorededicatedSh,
	"scripts/restoreShared.sh": scriptsRestoresharedSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"backupDedicated.sh": &bintree{scriptsBackupdedicatedSh, map[string]*bintree{}},
		"backupShared.sh": &bintree{scriptsBackupsharedSh, map[string]*bintree{}},
		"restoreDedicated.sh": &bintree{scriptsRestorededicatedSh, map[string]*bintree{}},
		"restoreShared.sh": &bintree{scriptsRestoresharedSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

