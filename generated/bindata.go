// Code generated by go-bindata.
// sources:
// scripts/backupDedicated.sh
// scripts/backupShared.sh
// scripts/restoreDedicated.sh
// scripts/restoreShared.sh
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBackupdedicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\x31\x4f\xf3\x30\x10\xdd\xfd\x2b\x4e\x91\xd5\x7e\x19\x5c\x7f\x2d\x03\x53\x87\x22\x15\x84\xd4\xad\x88\x05\x50\x74\xb5\x4d\xb0\x9a\xd8\xc6\x76\x13\x89\xaa\xff\x9d\xa4\xa9\x12\xca\x00\x13\x95\x07\xfb\xd9\x7e\xef\xdd\x3b\xdd\xed\xfd\x6a\x39\x4f\x78\x85\x9e\x57\x02\x1d\x0f\xd1\x7a\xc5\xbd\x92\x3a\x24\xe4\xb8\x65\xc2\x96\x25\x1a\x39\xa7\xff\xb0\xde\xc2\xb8\x79\x34\x58\x2a\x76\xba\x86\x9b\xbb\xf5\xe2\x71\xc9\xf7\xce\x6b\x13\x81\x5e\x1d\xc6\x40\x5b\xd5\x4e\x64\x22\xac\x79\x4d\x4f\x4a\xce\xfa\xd8\xcb\xb4\xa0\x67\xcd\x7e\x62\xd5\x5f\xbd\xdf\x77\xda\x2b\x87\x21\xfc\xc2\x2d\x30\xc4\x2c\x60\xa5\x1a\xee\x10\xcf\xa1\xd8\x62\xae\x42\xf7\x95\x6f\xb4\xe9\x4e\x4c\x14\x1a\xd8\x1b\x4c\x67\xd7\x93\xff\xcd\x9a\x02\x73\x40\x87\xaa\x81\x61\x0f\x6b\x09\xab\xc5\xfa\xa1\x4d\x9d\x92\x4d\xfe\x67\x26\x74\x7f\xd6\x7f\xce\x9f\x13\x7e\x48\x89\x51\x75\x76\xa1\x70\x3b\x13\x75\x01\x4f\x40\xcf\x3c\x81\xe5\x4d\xd7\x07\xf8\x42\xa4\x25\x00\x17\xac\x4b\x5a\xa3\x88\x90\xf0\x7d\x6c\x61\x34\x82\x88\x1e\xc4\x07\x1c\x69\xe4\x33\x00\x00\xff\xff\xfd\xa4\xac\xd6\xde\x02\x00\x00")

func scriptsBackupdedicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupdedicatedSh,
		"scripts/backupDedicated.sh",
	)
}

func scriptsBackupdedicatedSh() (*asset, error) {
	bytes, err := scriptsBackupdedicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupDedicated.sh", size: 734, mode: os.FileMode(420), modTime: time.Unix(1459951760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsBackupsharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\xcf\x4f\xc2\x30\x18\xbd\xf3\x57\xbc\x98\x05\xd4\xa4\x54\xf0\xe0\x81\x78\xc0\x04\x8d\x09\x37\x8c\x17\x24\xe4\xa3\xed\xa0\x01\xda\xd9\x16\x96\x48\xf8\xdf\x2d\x1b\x6e\x72\x92\x8b\xda\x5d\xbe\xb7\xed\xbd\xf7\xfd\xe8\x97\x5a\x87\xc7\xe7\xe1\x00\xda\x80\x6f\xc9\xf1\xad\xa0\x8c\xfb\x60\x9d\xe2\x22\x65\x4e\x49\xed\xd9\xcc\xd9\xa5\x72\xbc\x04\x92\x02\xf1\xeb\x1e\xa4\x6d\x20\x1e\x9d\x62\x3c\x06\x93\x48\x0a\x99\xc9\xa4\x87\xb0\x50\xa6\xf8\x16\x4f\xc1\x99\x0a\xbb\x5e\x93\x91\xf7\xc9\x25\xe5\x4b\xb4\xa2\x92\xa1\xb5\x62\xc7\xd7\x78\x78\x1a\xf5\x5f\x07\x7c\x97\x39\x6d\x02\x92\xdb\x7d\xab\x54\x2b\x1d\xdb\xc2\x9a\xf4\xea\x54\x30\xb3\x2e\x54\x6a\x07\x50\x91\xbb\x67\x90\xf3\xef\x99\xbc\x6f\xb4\x53\x19\x79\x7f\x9e\xc4\x8a\x7c\x98\x7a\xda\xaa\x28\x51\x37\x2c\x23\xb1\xa4\xb9\xf2\x25\x83\xcf\xb4\x39\x76\x4b\xac\x34\xd8\x02\x9d\xee\x5d\xfb\x26\x3e\x1d\xb0\x0c\x49\x5d\x03\x18\x55\x30\x97\x18\xf6\x47\x2f\x87\x56\x54\x6e\xb3\xf9\xaf\x79\x25\xbb\x93\xd9\x70\xfe\x76\xc1\xf7\x95\xb1\x51\xf9\xf4\x6f\x4b\xdd\x98\xa0\x57\x18\x23\x39\xb1\x06\x9b\xc7\x89\xd4\x70\xf2\xf5\xfb\xf1\xfa\xfd\x4f\xae\xd2\x1a\x55\xc4\xa9\x6e\x14\xb1\x90\x3f\x6e\x0f\x9a\x4d\x04\x72\x10\x1f\xa8\x17\xa9\xf1\x19\x00\x00\xff\xff\x8f\xd2\x82\x93\x80\x03\x00\x00")

func scriptsBackupsharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupsharedSh,
		"scripts/backupShared.sh",
	)
}

func scriptsBackupsharedSh() (*asset, error) {
	bytes, err := scriptsBackupsharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupShared.sh", size: 896, mode: os.FileMode(420), modTime: time.Unix(1459891238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestorededicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\x13\x31\x10\xbd\xfb\x57\x4c\xb7\x51\x43\x90\xbc\x4e\x7a\x28\x42\x90\x03\x88\x82\x7a\xa2\x0a\x48\x1c\x10\x5a\x39\xf6\x24\x6b\xc5\x6b\xbb\xb6\x37\xa1\x02\xfe\x3b\xde\x34\x69\xb2\x25\x1f\x15\x70\x68\x72\x58\x8d\xe7\xcd\xcc\xf3\xce\x9b\xd9\xd3\x13\x36\x56\x86\x8d\x79\x28\x49\xe4\x7e\x8a\xb1\x90\xca\x0f\xd9\x9c\x7b\x36\x17\xdc\xb1\x10\xad\x47\xe6\x51\xaa\xc0\x88\x90\xf0\xd0\x13\x2b\x57\x8c\xb9\x98\xd5\x8e\xc1\xd9\x19\xa4\x1c\xf0\x7d\x3e\x39\x04\x5b\xe6\xa2\x51\x69\xcc\x13\x9a\xa0\x28\x2d\x64\x23\x6c\x70\xca\x4c\x61\xe9\xce\xc8\xf2\x51\x38\xeb\xe3\xb0\xf3\x8c\x2f\x66\xd0\x65\x8d\xc1\x7e\xb8\x84\x8a\xd0\x39\xff\xd5\x85\xce\x86\xf1\x5d\xd6\x5c\x58\x33\xe9\xad\x63\x17\xf2\x3e\xd4\xe3\x4d\xad\x3c\x3a\x1e\xc2\xa3\x32\x5c\x5f\xbd\x4b\xb1\x82\xc7\x3f\x11\x34\xa0\x9f\xa3\xcf\x9d\x92\x3d\x32\x53\x5a\x03\x7d\x09\x9d\x14\x40\x7c\x05\xd4\x4f\x0e\x46\x90\xd3\x53\x08\x18\x21\x5a\xe0\xce\xa1\x91\xd6\xe8\x5b\x30\x96\x04\x94\x40\x15\x74\x03\xdb\x3a\xbf\xc5\x96\x69\x2c\x9b\xee\xa3\xbc\x95\xc0\xa3\xe1\x15\x52\x61\xab\x8a\x1b\x09\x6f\x3f\x8c\x2e\xbf\x8c\xae\x3e\x5f\xbe\xf9\xf8\x1e\xb2\xec\xb0\x7b\xdb\xca\x0e\x54\xdb\x71\xd5\xe7\x39\xb7\x7b\x1c\x5e\x8e\x89\x70\x47\x35\xc1\x64\x5d\xb9\x06\xdc\x0a\xcf\x89\x28\x2b\x2b\xe1\xe2\xa2\xdf\x3a\x5f\x83\x09\x59\x94\x49\x4b\x70\x02\x46\x00\xbd\x81\x01\x68\x2b\xb8\x2e\x6d\x48\xcd\xdb\xa8\x08\x5e\x33\x89\x73\x66\x6a\xad\x5f\x81\xb4\x10\x34\xa2\x83\x41\xbf\x31\x0c\xae\xb4\x7f\xed\xed\xd4\x63\x08\x9f\x22\x8f\x75\x48\x0a\xd8\x50\x76\x89\x28\x9f\x62\x58\x51\x6d\x86\xe6\xae\xb9\x42\x2b\xa0\x25\x0c\xce\x5f\xe4\xfd\xf4\x1f\x00\x75\xad\xba\x94\xdf\x9b\x0b\x09\xca\x4c\x2c\xfc\x84\x54\xc5\x41\x37\xbd\xb0\xc2\xe3\xc2\xab\x88\x85\x32\x85\x5b\x55\xef\xf6\xc8\x7f\xaf\xbb\xdd\x58\xe2\x9e\xca\x35\x6b\x93\xd6\x00\x7c\x85\xac\xd3\xa6\x94\xc1\x70\x98\x0e\x77\x35\x25\x83\x6f\x44\x5a\x02\xe9\xf7\x64\xae\xd1\x90\x59\xe9\x89\x2c\xd5\xf4\x77\xfb\x63\xe7\x0e\x48\x43\xff\x60\x23\xfc\xf3\x0e\x68\x0f\xf9\x91\x75\xb1\xbf\xda\x7a\xd6\x8f\x8d\xf5\x63\x71\x9b\x4f\xc2\xef\x00\x00\x00\xff\xff\x06\x59\x7d\x17\x95\x06\x00\x00")

func scriptsRestorededicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestorededicatedSh,
		"scripts/restoreDedicated.sh",
	)
}

func scriptsRestorededicatedSh() (*asset, error) {
	bytes, err := scriptsRestorededicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreDedicated.sh", size: 1685, mode: os.FileMode(420), modTime: time.Unix(1460002359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestoresharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xd1\x4e\xdb\x4a\x10\x7d\xcf\x57\x0c\xc6\x22\x17\x24\x67\x09\x0f\x5c\x5d\x71\xf3\xd0\x0a\xa8\x90\xaa\x16\xd1\x4a\x7d\x40\x28\xda\x78\xc7\xf1\x2a\xeb\xdd\x65\x77\x93\x80\xda\xfe\x7b\x27\x36\x24\xeb\x90\x42\x2a\x51\x09\xe7\x21\xd9\xf8\xcc\x99\x39\x93\x99\xe3\xec\xee\xb0\x91\xd4\x6c\xc4\x7d\xd9\x09\xdc\x8d\x31\x0c\x85\x74\x03\x36\xe3\x8e\xcd\x72\x6e\x99\x0f\xc6\x21\xcb\x8b\xcc\xa1\x90\x3e\x1b\x39\x33\x41\xc7\x9a\x83\xe0\x81\xb3\x4e\x2e\x60\x1d\x1e\x2a\x3b\x1c\xf1\x7c\x32\xb5\x0c\xf6\xf6\x80\x88\xe1\x6e\x56\x3c\x07\x6b\x08\x83\x54\xd8\x23\x74\xa7\x30\x0e\xce\x2f\x3e\x9e\x81\xd4\x2f\x47\xd5\x65\x1c\x9c\x80\x30\x1d\xa0\x4b\x16\x70\x7d\x0d\x99\x80\xb4\x66\xb8\xb9\x39\x81\x50\xa2\xae\xef\xd1\x45\xf2\x30\x27\xa2\xfb\x4f\xbc\xc2\x41\xfa\x0f\x49\x47\x4d\x1f\x1b\xf8\xfe\x23\x4c\x6a\x1f\xb8\x52\xa7\xd4\x8c\x74\xd5\x98\xb4\x15\xbd\xc4\x52\xc6\x45\xc2\x24\x5d\x45\x25\xb0\x96\x97\x2e\xcc\x4b\x03\xc9\x15\x2e\x74\x48\x3d\x86\x36\x5b\x12\x21\x6b\x61\x43\x6b\x5c\xa0\x0a\xf9\x7c\x02\x5d\xb6\x38\xb0\xef\x96\x02\x03\xa4\x47\x3f\xbb\x10\x25\x6b\x1a\xd1\xcb\x8d\x2e\xf6\x9f\xb2\xcc\xc5\x92\xc4\xe1\xed\x94\x72\x5a\xee\xfd\x1f\x72\x5d\x5e\x9c\x12\x4b\xce\xc3\x53\x6c\xe6\xd1\xcd\xd0\xf5\xac\x14\x71\xc4\x44\x2a\x05\xd9\x7f\x90\x52\x68\x5c\x54\x05\x99\x2b\x9e\x65\x89\xd0\xbb\xbb\xe0\x31\x40\x30\xc0\xad\x45\x2d\x8c\x56\xf7\xa0\x4d\x84\xf0\x28\x20\x93\xd0\xf5\x2c\x42\xdc\x63\xeb\xa8\x0d\x1b\xff\x4e\xe4\x46\x2a\x57\x8f\x44\x96\x9b\xaa\xe2\x5a\xc0\xfb\x0f\x57\x67\xdf\xae\x2e\xbe\x9e\xbd\xfb\x7c\x0e\x49\xf2\xfc\xed\xf8\x94\x6c\x95\x77\x43\x4b\xc4\x88\x1d\x44\x88\xdc\x6e\xb9\x06\xed\x91\x5a\xd0\x88\x69\x65\x7b\x4e\x8c\xd6\xe9\x7b\x31\x7d\x59\x19\x01\xc7\xc7\x87\xeb\xa0\xc7\xe0\x4e\x04\x9e\x97\xb4\xa5\xb0\x03\x3a\x87\xec\x16\xfa\xa0\x4c\xce\x55\x69\x3c\x4d\xc6\x6a\x6c\xe1\x7f\x26\x70\xc6\xf4\x54\xa9\xc5\x62\x82\x57\x88\x16\xfa\x87\x8b\x83\xc6\x88\xad\xd9\xad\x4b\x67\xc6\x0e\xbd\xff\x12\x78\x98\x7a\x1a\xb4\x95\x5a\x4b\x1a\xf9\x18\x7d\xa3\xb2\x76\xab\x46\x6f\xae\x24\x64\x25\xf4\x8f\xfe\xed\x1d\xd2\xab\x0f\x99\x6d\x55\x90\xf1\xe5\x71\x2e\x68\x9f\x0b\x03\x3f\x80\xb2\x58\xe8\x72\x53\x0c\x1d\xce\x9d\x0c\x38\x94\x7a\x68\x1f\xb2\x77\xe3\xf1\x7d\xf5\x0a\xe2\xb9\x88\xf2\xd8\xb7\x27\x7d\xaa\xc9\x88\xc9\xd2\x92\xb4\x5d\x5c\x02\x83\x01\x7d\xb9\xe9\x27\x23\xbb\x8b\x08\x44\xbc\xa0\x6f\x52\x22\x3c\x4e\x64\xab\x6a\x9a\xcc\xbf\x61\x79\x1b\x2d\x8a\x3c\x69\xcd\xb0\x5e\xd1\xa2\xda\x1e\xf4\x82\x9b\xbd\x98\x17\x95\xc7\x27\x8f\xb1\x28\x84\x3a\x87\x5e\x77\x03\xe0\x9d\xf4\x61\xf9\x1c\x2b\x64\xe7\xe1\xad\xee\xec\x83\xcb\x6d\xe5\x63\x5b\x83\x97\xff\x18\x7e\x05\x00\x00\xff\xff\xd5\xa4\xc8\x66\xc9\x08\x00\x00")

func scriptsRestoresharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestoresharedSh,
		"scripts/restoreShared.sh",
	)
}

func scriptsRestoresharedSh() (*asset, error) {
	bytes, err := scriptsRestoresharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreShared.sh", size: 2249, mode: os.FileMode(420), modTime: time.Unix(1460002352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/backupDedicated.sh": scriptsBackupdedicatedSh,
	"scripts/backupShared.sh": scriptsBackupsharedSh,
	"scripts/restoreDedicated.sh": scriptsRestorededicatedSh,
	"scripts/restoreShared.sh": scriptsRestoresharedSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"backupDedicated.sh": &bintree{scriptsBackupdedicatedSh, map[string]*bintree{}},
		"backupShared.sh": &bintree{scriptsBackupsharedSh, map[string]*bintree{}},
		"restoreDedicated.sh": &bintree{scriptsRestorededicatedSh, map[string]*bintree{}},
		"restoreShared.sh": &bintree{scriptsRestoresharedSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

