// Code generated by go-bindata.
// sources:
// scripts/backup_shared.sh
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBackup_sharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\xcf\x4f\xc2\x30\x18\xbd\xf3\x57\xbc\x98\x05\xd4\xa4\x54\xf0\xe0\x81\x78\xc0\x04\x8d\x09\x37\x8c\x17\x24\xe4\xa3\xed\xa0\x01\xda\xd9\x16\x96\x48\xf8\xdf\x2d\x1b\x6e\x72\x92\x8b\xda\x5d\xbe\xb7\xed\xbd\xf7\xfd\xe8\x97\x5a\x87\xc7\xe7\xe1\x00\xda\x80\x6f\xc9\xf1\xad\xa0\x8c\xfb\x60\x9d\xe2\x22\x65\x4e\x49\xed\xd9\xcc\xd9\xa5\x72\xbc\x04\x92\x02\xf1\xeb\x1e\xa4\x6d\x20\x1e\x9d\x62\x3c\x06\x93\x48\x0a\x99\xc9\xa4\x87\xb0\x50\xa6\xf8\x16\x4f\xc1\x99\x0a\xbb\x5e\x93\x91\xf7\xc9\x25\xe5\x4b\xb4\xa2\x92\xa1\xb5\x62\xc7\xd7\x78\x78\x1a\xf5\x5f\x07\x7c\x97\x39\x6d\x02\x92\xdb\x7d\xab\x54\x2b\x1d\xdb\xc2\x9a\xf4\xea\x54\x30\xb3\x2e\x54\x6a\x07\x50\x91\xbb\x67\x90\xf3\xef\x99\xbc\x6f\xb4\x53\x19\x79\x7f\x9e\xc4\x8a\x7c\x98\x7a\xda\xaa\x28\x51\x37\x2c\x23\xb1\xa4\xb9\xf2\x25\x83\xcf\xb4\x39\x76\x4b\xac\x34\xd8\x02\x9d\xee\x5d\xfb\x26\x3e\x1d\xb0\x0c\x49\x5d\x03\x18\x55\x30\x97\x18\xf6\x47\x2f\x87\x56\x54\x6e\xb3\xf9\xaf\x79\x25\xbb\x93\xd9\x70\xfe\x76\xc1\xf7\x95\xb1\x51\xf9\xf4\x6f\x4b\xdd\x98\xa0\x57\x18\x23\x39\xb1\x06\x9b\xc7\x89\xd4\x70\xf2\xf5\xfb\xf1\xfa\xfd\x4f\xae\xd2\x1a\x55\xc4\xa9\x6e\x14\xb1\x90\x3f\x6e\x0f\x9a\x4d\x04\x72\x10\x1f\xa8\x17\xa9\xf1\x19\x00\x00\xff\xff\x8f\xd2\x82\x93\x80\x03\x00\x00")

func scriptsBackup_sharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackup_sharedSh,
		"scripts/backup_shared.sh",
	)
}

func scriptsBackup_sharedSh() (*asset, error) {
	bytes, err := scriptsBackup_sharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backup_shared.sh", size: 896, mode: os.FileMode(420), modTime: time.Unix(1459891238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/backup_shared.sh": scriptsBackup_sharedSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"backup_shared.sh": &bintree{scriptsBackup_sharedSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

