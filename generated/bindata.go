// Code generated by go-bindata.
// sources:
// scripts/backupDedicated.sh
// scripts/backupShared.sh
// scripts/restoreDedicated.sh
// scripts/restoreShared.sh
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBackupdedicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x53\x4d\x8f\xd3\x30\x10\x3d\x93\x5f\x31\x84\x48\x0b\x87\xac\xe9\x72\xe0\xd4\x43\x91\x0a\x42\xea\xad\x88\x0b\xa0\x6a\xe2\x4c\x12\xab\xa9\x1d\x3c\x4e\x83\x54\xf5\xbf\xe3\xb4\x69\x3e\x4a\x55\x4e\xa0\x55\xa4\xc8\x9e\x8f\x37\xef\x3d\x6b\x5e\xbd\x14\x89\xd2\x22\x41\x2e\x82\x8f\x9f\x57\xcb\x79\x28\xf6\x68\xc5\x5e\x62\x25\xd8\x19\x4b\xc2\x52\xaa\x38\x0c\x54\x06\xdf\x20\x6e\x20\x8c\xda\xb2\x73\xf4\x51\x1a\x9d\x85\xf0\x23\x70\x05\xe9\x00\xe0\x14\xdc\x48\xb3\xdb\xa1\x4e\xe7\xd1\x6b\x6c\xb6\xf0\xe0\x4b\x35\xee\x28\xee\xc2\xf0\xe1\xd3\x7a\xf1\x75\x29\x0e\x95\x55\xda\x41\xf4\xee\xf8\x00\xd7\x90\x6f\x7a\xac\xca\x58\xd7\x03\xb5\x97\xbe\xef\xe9\x7e\x5f\x33\x9e\xff\xb3\x56\x96\x2a\x64\xfe\x6b\x37\xc9\xc2\x40\xa8\x98\x6b\xa5\x73\x28\x91\xdd\x86\x71\x4f\xa1\x4f\xf5\x17\x0f\x3c\x78\x54\xa1\xdc\x62\x4e\x7c\xc6\x39\x79\x79\x3a\xc5\xb2\x54\x10\x17\x30\x7b\x7a\xff\xf8\xd6\x7f\x33\x88\x2b\x88\x06\x51\x10\x63\x7f\x6d\x52\x58\x2d\xd6\x5f\x5a\x5b\x06\x0e\x96\xb8\x2e\x1d\x98\x6c\x18\x0c\xd1\x84\x10\x97\x44\x15\xcc\xfe\x60\x9d\xe4\xe7\x6a\xe4\xcb\x84\xce\xfa\xb6\xa9\x4b\xfe\x0b\x0d\xd1\x61\x32\x4d\x88\xef\xa1\x38\xde\x12\x74\x21\x18\x75\x87\x7b\x62\x26\x8a\x35\x35\x9b\xe7\xf0\x0c\x13\x1e\x2d\xb1\x5a\x3b\x55\xfa\xfd\x98\x66\x20\xce\xdd\xe8\xcd\xfc\x9e\x00\xa4\xc6\xff\xc6\x72\xff\xb3\xaa\x8b\x2e\x59\x90\xdc\x4e\x0c\x1e\x33\xc5\x1c\x95\x66\x77\x43\x69\x6a\x34\x05\x54\x32\xf5\x0e\x5d\xaf\x11\x28\x06\x6d\x1c\x34\x56\x39\x4c\x4a\xdf\xf5\x82\x7e\x29\xe7\xc5\x66\x2a\xf8\x1d\x00\x00\xff\xff\x34\x1f\x6a\x77\x6f\x04\x00\x00")

func scriptsBackupdedicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupdedicatedSh,
		"scripts/backupDedicated.sh",
	)
}

func scriptsBackupdedicatedSh() (*asset, error) {
	bytes, err := scriptsBackupdedicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupDedicated.sh", size: 1135, mode: os.FileMode(420), modTime: time.Unix(1460742164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsBackupsharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x0c\x21\xd2\x02\x92\xd7\x74\x39\x70\x58\x71\x58\xa4\x05\x21\xed\x01\x69\x11\x97\xa5\xaa\x26\xce\x24\xb1\x9a\xda\xc1\xe3\x34\x48\xab\xfd\xef\xa4\x49\x9a\x8f\xd2\xa2\x72\x40\x90\x1e\x5a\xdb\xf3\xde\xbc\xf7\xa6\xce\xf3\x67\x32\xd6\x46\xc6\xc8\x79\x40\x2a\xb7\x10\x7e\x76\x56\x11\xb3\x36\x19\xc8\x2d\x3a\xb9\x55\x58\x4a\xf6\xd6\x91\x54\xa9\x70\x94\x68\x16\xb1\xb3\x6b\x72\xb2\x5b\x24\xe8\x51\x86\x41\x6a\x1d\x7c\xf8\x74\x77\x0b\xda\xfc\x09\xf0\xd5\x35\x24\x36\x80\xe6\xd1\x29\x3c\x3c\x80\x48\x20\x6a\x69\x96\xcb\x6b\xf0\x39\x99\xf6\x0c\xa0\x13\x57\x8e\xe2\xda\xaa\xb0\x3f\x6d\xc1\x20\x6a\x08\xdb\xed\xae\xc1\xa5\xb2\x26\x0d\x61\xce\xd3\x3c\xed\xe1\x4a\xd9\xcd\x06\x4d\xf2\x2e\x7a\x81\xf5\x1a\x2e\x1a\x88\xc1\x0d\x89\x7e\x1b\xde\x7f\xbc\xbf\xf9\x7a\x2b\x1f\x4b\xa7\x8d\x87\xe8\xcd\xd3\x05\x1c\x52\xbf\x3c\xa4\x2c\xad\xf3\x03\xdf\x6e\x31\xc0\xaf\xce\x82\xd7\x53\x35\xdf\x2b\xed\xa8\x44\xe6\x73\x49\xba\x84\x34\x73\xb5\x8b\xa7\x40\xf6\x2b\xc6\x2d\x85\x63\xc5\xb0\xd7\xb4\x19\x47\x54\xa2\x5a\x63\x46\xdc\xb1\xb6\x7f\x87\x6e\x3e\xaa\xd0\x20\x72\x58\x5c\xbd\xbd\x7c\xdd\x7c\x16\x20\x4a\x88\x46\xa7\x20\x70\x58\xd6\x09\xdc\xdd\xdc\x7f\xd9\x45\xf6\x8b\x22\x47\x5c\x15\x1e\x6c\x3a\xf6\x87\xe8\x98\x3c\x2e\x88\x4a\x58\x9c\x72\x14\x67\x1d\x16\x79\xdf\xb6\x9f\xd5\x84\xa2\xaf\xf9\x1b\xfe\xa2\xc7\x59\x53\x29\xbf\x85\xf2\xe9\x37\x66\xf7\x72\xa3\xfe\xc7\xf9\x46\x8f\x65\x63\xa8\x5e\xfd\x47\xe3\x9b\xc9\x99\xc8\xac\x8c\xd7\x45\x73\x13\xe7\x05\x20\x32\x3f\x19\x39\x2c\x47\x40\x7f\xf7\x4f\xe4\xf2\x4f\x6c\xf7\xbe\x55\x4e\x6a\x3d\x1b\xc7\xd4\x02\x66\xa8\x0d\xfb\xd3\x49\x24\xd6\xd0\xfe\xd5\x55\x30\x05\x73\xf2\xc3\x6b\x0c\x9a\xc1\x58\x0f\xb5\xd3\x1e\xe3\x62\x42\x44\x3f\xb4\x1f\x22\x49\x75\xd0\x7f\xb5\xf4\x3f\x03\x00\x00\xff\xff\xfe\xe3\x7f\xe8\xbd\x05\x00\x00")

func scriptsBackupsharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupsharedSh,
		"scripts/backupShared.sh",
	)
}

func scriptsBackupsharedSh() (*asset, error) {
	bytes, err := scriptsBackupsharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupShared.sh", size: 1469, mode: os.FileMode(420), modTime: time.Unix(1460743473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestorededicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x51\x6f\xda\x30\x10\x7e\xf7\xaf\xb8\xa6\x08\xc6\xa4\x60\xe0\xa1\xd3\xb4\x51\x69\xd3\xba\xa9\x4f\xab\x58\xa5\x3e\x4c\x53\x64\x62\x43\x2c\x82\xed\xda\x0e\x59\xb5\xed\xbf\xef\xe2\x40\x20\xb4\xac\x95\xb6\x49\x15\x92\xc1\xf6\xf7\x9d\xbf\xfb\xee\x74\x9c\x9e\xd0\x99\x54\x74\xc6\x5c\x46\x3c\xb3\x0b\xe1\x13\x2e\xed\x84\xae\x99\xa5\xeb\x94\x19\xea\xbc\xb6\x82\x5a\xc1\xa5\x23\x29\x87\xc3\x0b\xbf\x32\xc9\x8c\xa5\xcb\xc2\x50\xe8\x76\x01\x43\xc0\xf7\xf5\xfc\x4f\xb0\x10\x2a\xf6\x32\x17\x83\x0a\x7d\x0e\x94\x8b\x35\x55\x45\x9e\xc3\xf8\xbc\x3b\x22\x22\xcd\x34\x44\x53\x51\x11\xa5\x5a\x40\xc0\x47\x24\x7c\x25\x46\x5b\x3f\xe9\xbc\x60\xe5\x12\x7a\xb4\xda\xd0\x1f\x06\x51\x1e\x3a\xe3\x5f\x3d\xe8\xec\x32\xa8\x9f\x19\xa4\x5a\xcd\xfb\x5b\x6e\xc9\x1b\xaa\x15\xb7\x85\xb4\xc2\x30\xe7\x9e\x14\xe1\xea\xf2\x03\x72\x69\xe1\x6c\xb0\xcb\x2c\x90\x5b\x2b\x8b\x9d\xb0\x6b\x61\xfb\x1b\xdd\xa8\xda\x98\x4a\x76\x7d\x0c\xa5\xf4\x19\x20\x1b\x3a\xb8\x44\x64\x29\x31\xcd\xf8\x75\xd8\x91\xd3\x53\x44\x79\xf0\x1a\x98\x31\x42\x71\xad\xf2\x3b\x50\x9a\x38\xc1\x21\x96\xd0\x73\x74\xef\xfc\x4e\xb4\xb6\x4a\xd3\xc5\x31\xb9\xc4\xae\x20\xb6\xf3\xd6\xed\xcb\x01\xd3\x47\x2e\x2c\x9f\x91\xd4\x3c\x5a\x32\xca\x8b\x95\xa9\xc0\x2d\xfa\x80\xa4\xd9\x4a\x73\x38\x3b\x1b\xb6\xce\xb7\xe0\xbd\x72\x32\xeb\x2b\x63\x56\x5a\x49\x1f\x91\xdd\x73\x33\xed\xb2\xe0\x6a\xb8\x41\x57\x03\x14\x58\x9e\x93\x0d\xfb\x86\xc9\x40\x9d\x6b\xbb\xf5\x15\x4d\xab\x61\x5a\x41\xd5\x07\xd0\xd9\x35\x48\x44\xca\x0c\xdb\x0b\x4e\x40\xa5\x10\xdf\xc2\x08\x72\x9d\xb2\x3c\xd3\xae\x05\x83\xb7\x4d\xe7\xbd\x01\x8e\xf1\x72\x81\x45\x1d\x0d\xab\x8d\x12\x04\xa0\x4e\xe7\xca\x6a\xac\xb6\x73\x5f\x3c\xf3\x85\xab\xba\xa0\x51\x6e\xd0\x1e\xb6\xc0\xc2\xd4\x06\x55\x39\xd4\x3d\x91\xe6\x12\xe2\x0c\x46\xe3\x57\x83\x21\x7e\x46\x10\x9b\xd6\xcb\x31\x6b\xb6\x25\x07\xa9\xe6\x1a\x7e\x42\xe8\xa9\x1e\x96\x29\xb1\xa2\xb4\xd2\x8b\x44\xaa\xc4\x6c\x5e\xef\xf5\x51\x50\xed\xc6\x75\x90\x05\x5b\x5d\x50\x0b\xdb\xba\xdf\x96\x1b\x21\xeb\x9f\xeb\x7d\xff\x69\x7a\x71\x33\xbd\xbc\xbe\x78\xf7\xf9\x23\xc6\xdf\xf8\x86\xbf\xcc\x73\xb3\xea\x9e\x47\xe6\x9e\x3b\x85\xc2\x51\x04\x5f\x21\x3a\xbc\x83\xc9\x04\x0f\x1f\x34\x15\xbe\x21\x91\x6b\x5c\x9e\x55\xce\xfb\xa5\x08\x2d\xfc\x7f\xc6\xd6\x83\xe3\x09\xe7\xd1\xc1\xb0\x3a\x3e\x9e\xfe\x72\x26\x6c\x86\xd8\x63\xf3\xea\xa9\xb8\xe6\xaf\x88\xfc\x0e\x00\x00\xff\xff\x90\x14\x15\xeb\x0c\x07\x00\x00")

func scriptsRestorededicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestorededicatedSh,
		"scripts/restoreDedicated.sh",
	)
}

func scriptsRestorededicatedSh() (*asset, error) {
	bytes, err := scriptsRestorededicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreDedicated.sh", size: 1804, mode: os.FileMode(420), modTime: time.Unix(1461015082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestoresharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xdf\x4f\xdb\x30\x10\x7e\xcf\x5f\x71\xa4\x11\x5d\x91\x52\x53\x1e\x98\x26\x56\xa4\x4d\xc0\x84\x34\x6d\x88\x21\xf1\x80\x50\xe5\xc6\x4e\x63\x35\xb1\x8d\xed\xb6\xa0\x6d\xff\xfb\x2e\x49\x7f\x24\x69\x29\x65\xdb\x03\x41\xa2\xb5\xf3\xdd\x77\x77\x9f\xcf\x77\x6d\xed\x91\xa1\x90\x64\x48\x6d\xe2\x39\x6a\x46\xdc\x0d\x98\x30\x7d\x32\xa5\x86\x4c\x23\xaa\x89\x75\xca\x70\x12\xc5\xa1\xe1\x4c\xd8\x70\x68\xd4\x98\x1b\x52\x2e\x18\x75\x94\x78\x11\x83\x26\xdc\x65\x7a\x30\xa4\xd1\x78\xa2\x09\xec\xef\x03\x12\xc3\xe3\x34\xde\x06\x2b\x09\x9d\x48\x79\x37\x47\x9f\x02\x61\x7c\x4a\xe4\x24\x4d\xe1\xe8\x74\xbf\xe7\xc5\xca\xc0\xc5\xe5\xd7\x73\x10\xf2\x65\x9a\x22\xae\x83\x13\x60\xca\x03\x7c\x44\x0c\x77\x77\x10\x32\x08\x0a\x86\xfb\xfb\x13\x70\x09\x97\xc5\x3b\x7c\x30\x5f\x1e\x21\xd1\xd3\x37\x9a\xf1\x7e\xf0\x0e\xb5\xe0\x12\xbf\x96\xf0\xce\x02\x26\xa4\x75\x34\x4d\xcf\x50\x9d\x60\xa5\x54\x50\xb3\x5e\x62\xd1\x63\xee\xd0\x0f\x56\x56\x3e\x34\xfc\xe2\xc3\xa3\x44\x81\x7f\xcd\xf3\x3c\x84\x1c\x41\x9d\xcd\xaf\x20\x8b\xc4\x06\x5a\x19\x87\x11\xd2\xd9\x18\xda\x24\x5f\x90\x9f\x1a\x0d\x1d\x04\x47\xbf\xdb\x50\x71\x56\x0a\xd1\x8d\x94\x8c\x3b\xeb\x2c\x33\xb6\x24\x31\xfc\x61\x82\x3e\x35\xb5\xf6\x95\x5c\x57\x97\x67\xc8\x12\x51\xb7\x8e\x0d\x2d\x37\x53\x6e\xba\x5a\xb0\xce\x5a\xb6\x98\xab\xd6\x79\xb2\x25\x08\x66\xc2\x25\x39\x19\x04\xf8\xaf\x9a\xf2\x58\xe0\xe1\x87\x1f\x8a\xfd\x6a\x0e\x19\x84\x26\xde\xea\xb4\x82\x6e\xb5\xd0\x8f\x03\xa7\x80\x6a\xcd\x25\x53\x32\x7d\x02\xa9\x2a\x08\xcb\x19\x84\x02\xda\x96\x54\x10\x4f\xbc\xb6\x94\x8a\x8c\x9e\xd3\x64\x23\x95\x29\x2a\x28\x8c\x54\x96\x51\xc9\xe0\xf3\x97\xeb\xf3\xdb\xeb\xcb\x9b\xf3\x4f\xdf\x2f\xc0\xf7\x49\xeb\x85\xf7\xbb\x38\xdb\xa8\x7c\x01\x82\x5f\x30\xc2\x23\xad\xb1\x6e\x17\x90\x0d\xc9\x41\x95\x5a\xef\x78\xc7\xea\xf5\x9a\xd3\xb0\x49\xa6\xbb\x86\x0d\x9b\xf4\xdd\x2a\x7d\x92\x29\x06\xc7\xc7\x87\x4d\xd0\xc2\xd8\x5b\x2b\x9a\x5b\x2a\x5c\x5e\x33\x79\x1b\x98\xd7\x0d\x1e\x29\xda\x1a\x07\x4a\x42\x7e\x15\x20\x58\xdd\x91\x6a\x19\xcd\x12\x6c\x2a\xb0\x07\x32\x82\xf0\x01\x7a\x90\xaa\x88\xa6\x89\xb2\x35\x03\xf8\xb8\xec\x37\x79\xdb\x00\x9b\x72\x14\xb0\x77\x98\x2f\x24\xaf\xb0\x01\x94\x77\xff\xca\x28\xd4\xd8\xda\x1f\x8e\xba\x89\xc5\x8b\xb0\x12\x4c\xa3\x4c\x74\xc4\x6d\x29\x54\xd1\x5e\x4b\xc9\xa2\x54\x40\x98\x40\xef\xe8\x7d\xf7\x10\xff\x7a\x10\xea\x5a\x0c\x21\x5d\x2e\x67\x0c\xfb\x4d\xac\x16\x27\xd9\xa6\x2a\x1e\x18\x3e\x33\xc2\xf1\x81\x90\x03\x3d\xf7\xde\xee\xd4\x42\x2b\xb5\xba\x29\x02\x84\x45\x84\x50\x86\x08\xc1\xa6\xc0\xfd\x9a\xfd\x22\xeb\xda\xe6\x7f\x4f\xec\x99\xb2\x04\xd0\x6f\x57\xd3\x35\x31\xf5\x16\x19\x27\x12\xe7\x18\x0e\x00\xbf\x89\x82\x7e\x1f\x37\x37\x9e\x03\xdc\xd7\x28\x98\xaa\x2d\xdf\xa8\x36\x7f\xa5\xce\xb2\xcc\x1a\x09\xe3\x35\x7b\x03\xd3\x65\xe3\x34\xc0\xf6\xdf\x98\x0d\xaf\x9b\x06\x2f\xb5\xfb\x7f\x9d\x06\x3c\xb5\x7c\x4d\x89\x8a\x09\xaa\xcb\xad\x6c\x3b\xe0\x8f\xc2\xae\x9a\x63\x2c\xbc\xf9\x47\xa1\xfe\x7c\x2e\xec\xd4\xf9\x77\x06\x2f\x7e\xd1\x79\x7f\x02\x00\x00\xff\xff\x8f\xec\xfc\x6f\x69\x0a\x00\x00")

func scriptsRestoresharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestoresharedSh,
		"scripts/restoreShared.sh",
	)
}

func scriptsRestoresharedSh() (*asset, error) {
	bytes, err := scriptsRestoresharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreShared.sh", size: 2665, mode: os.FileMode(420), modTime: time.Unix(1461015276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/backupDedicated.sh": scriptsBackupdedicatedSh,
	"scripts/backupShared.sh": scriptsBackupsharedSh,
	"scripts/restoreDedicated.sh": scriptsRestorededicatedSh,
	"scripts/restoreShared.sh": scriptsRestoresharedSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"backupDedicated.sh": &bintree{scriptsBackupdedicatedSh, map[string]*bintree{}},
		"backupShared.sh": &bintree{scriptsBackupsharedSh, map[string]*bintree{}},
		"restoreDedicated.sh": &bintree{scriptsRestorededicatedSh, map[string]*bintree{}},
		"restoreShared.sh": &bintree{scriptsRestoresharedSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

