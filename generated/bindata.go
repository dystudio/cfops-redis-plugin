// Code generated by go-bindata.
// sources:
// scripts/backupDedicated.sh
// scripts/backupShared.sh
// scripts/restoreDedicated.sh
// scripts/restoreShared.sh
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBackupdedicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\x31\x4f\xf3\x30\x10\xdd\xfd\x2b\x4e\x91\xd5\x7e\x19\x5c\x7f\x2d\x03\x53\x87\x22\x15\x84\xd4\xad\x88\x05\x50\x74\xb5\x4d\xb0\x9a\xd8\xc6\x76\x13\x89\xaa\xff\x9d\xa4\xa9\x12\xca\x00\x13\x95\x07\xfb\xd9\x7e\xef\xdd\x3b\xdd\xed\xfd\x6a\x39\x4f\x78\x85\x9e\x57\x02\x1d\x0f\xd1\x7a\xc5\xbd\x92\x3a\x24\xe4\xb8\x65\xc2\x96\x25\x1a\x39\xa7\xff\xb0\xde\xc2\xb8\x79\x34\x58\x2a\x76\xba\x86\x9b\xbb\xf5\xe2\x71\xc9\xf7\xce\x6b\x13\x81\x5e\x1d\xc6\x40\x5b\xd5\x4e\x64\x22\xac\x79\x4d\x4f\x4a\xce\xfa\xd8\xcb\xb4\xa0\x67\xcd\x7e\x62\xd5\x5f\xbd\xdf\x77\xda\x2b\x87\x21\xfc\xc2\x2d\x30\xc4\x2c\x60\xa5\x1a\xee\x10\xcf\xa1\xd8\x62\xae\x42\xf7\x95\x6f\xb4\xe9\x4e\x4c\x14\x1a\xd8\x1b\x4c\x67\xd7\x93\xff\xcd\x9a\x02\x73\x40\x87\xaa\x81\x61\x0f\x6b\x09\xab\xc5\xfa\xa1\x4d\x9d\x92\x4d\xfe\x67\x26\x74\x7f\xd6\x7f\xce\x9f\x13\x7e\x48\x89\x51\x75\x76\xa1\x70\x3b\x13\x75\x01\x4f\x40\xcf\x3c\x81\xe5\x4d\xd7\x07\xf8\x42\xa4\x25\x00\x17\xac\x4b\x5a\xa3\x88\x90\xf0\x7d\x6c\x61\x34\x82\x88\x1e\xc4\x07\x1c\x69\xe4\x33\x00\x00\xff\xff\xfd\xa4\xac\xd6\xde\x02\x00\x00")

func scriptsBackupdedicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupdedicatedSh,
		"scripts/backupDedicated.sh",
	)
}

func scriptsBackupdedicatedSh() (*asset, error) {
	bytes, err := scriptsBackupdedicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupDedicated.sh", size: 734, mode: os.FileMode(420), modTime: time.Unix(1459951760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsBackupsharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\xcf\x4f\xc2\x30\x18\xbd\xf3\x57\xbc\x98\x05\xd4\xa4\x54\xf0\xe0\x81\x78\xc0\x04\x8d\x09\x37\x8c\x17\x24\xe4\xa3\xed\xa0\x01\xda\xd9\x16\x96\x48\xf8\xdf\x2d\x1b\x6e\x72\x92\x8b\xda\x5d\xbe\xb7\xed\xbd\xf7\xfd\xe8\x97\x5a\x87\xc7\xe7\xe1\x00\xda\x80\x6f\xc9\xf1\xad\xa0\x8c\xfb\x60\x9d\xe2\x22\x65\x4e\x49\xed\xd9\xcc\xd9\xa5\x72\xbc\x04\x92\x02\xf1\xeb\x1e\xa4\x6d\x20\x1e\x9d\x62\x3c\x06\x93\x48\x0a\x99\xc9\xa4\x87\xb0\x50\xa6\xf8\x16\x4f\xc1\x99\x0a\xbb\x5e\x93\x91\xf7\xc9\x25\xe5\x4b\xb4\xa2\x92\xa1\xb5\x62\xc7\xd7\x78\x78\x1a\xf5\x5f\x07\x7c\x97\x39\x6d\x02\x92\xdb\x7d\xab\x54\x2b\x1d\xdb\xc2\x9a\xf4\xea\x54\x30\xb3\x2e\x54\x6a\x07\x50\x91\xbb\x67\x90\xf3\xef\x99\xbc\x6f\xb4\x53\x19\x79\x7f\x9e\xc4\x8a\x7c\x98\x7a\xda\xaa\x28\x51\x37\x2c\x23\xb1\xa4\xb9\xf2\x25\x83\xcf\xb4\x39\x76\x4b\xac\x34\xd8\x02\x9d\xee\x5d\xfb\x26\x3e\x1d\xb0\x0c\x49\x5d\x03\x18\x55\x30\x97\x18\xf6\x47\x2f\x87\x56\x54\x6e\xb3\xf9\xaf\x79\x25\xbb\x93\xd9\x70\xfe\x76\xc1\xf7\x95\xb1\x51\xf9\xf4\x6f\x4b\xdd\x98\xa0\x57\x18\x23\x39\xb1\x06\x9b\xc7\x89\xd4\x70\xf2\xf5\xfb\xf1\xfa\xfd\x4f\xae\xd2\x1a\x55\xc4\xa9\x6e\x14\xb1\x90\x3f\x6e\x0f\x9a\x4d\x04\x72\x10\x1f\xa8\x17\xa9\xf1\x19\x00\x00\xff\xff\x8f\xd2\x82\x93\x80\x03\x00\x00")

func scriptsBackupsharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackupsharedSh,
		"scripts/backupShared.sh",
	)
}

func scriptsBackupsharedSh() (*asset, error) {
	bytes, err := scriptsBackupsharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backupShared.sh", size: 896, mode: os.FileMode(420), modTime: time.Unix(1459891238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestorededicatedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4d\x6f\x13\x31\x10\xbd\xfb\x57\x4c\x37\x51\x42\x90\x1c\x27\x39\x14\x21\x48\x25\x10\x05\xf5\x44\x15\x90\x38\x20\xb4\x72\xec\x49\xd6\xca\xae\xed\xda\xde\x84\x0a\xf8\xef\x78\x37\x1f\xcd\x56\x4d\x52\x44\x0f\x4d\x0e\xab\xb1\xdf\x7c\xf9\xcd\x9b\xd6\x19\x9b\x2a\xcd\xa6\xdc\x67\x24\x70\x37\xc7\x90\x4a\xe5\xc6\x6c\xc9\x1d\x5b\x0a\x6e\x99\x0f\xc6\x21\x73\x28\x95\x27\x42\xc2\xfd\x8b\x50\xd8\x74\xca\xc5\xa2\xb4\x0c\x3a\x1d\x88\x21\xe0\xe7\x72\x76\x0c\x56\x87\xa2\x41\xe5\xd8\xaf\xd0\x17\xc0\x24\x2e\x99\x2e\xf3\x1c\x46\x17\x9d\x21\x41\x91\x19\x48\x26\x58\x39\x2a\x3d\x87\x1a\x9f\x90\xfa\x93\x5a\xe3\xc2\xb8\xfd\x82\xaf\x16\xd0\x65\x95\xc1\x7e\xd9\x88\x0a\xd0\x1e\xfd\xe9\x42\xfb\xae\x83\x75\x9a\xbe\x30\x7a\xd6\xdb\xfa\xae\xe4\xce\xd5\xe1\x4d\xa9\x1c\x5a\xee\xfd\xa3\x22\x5c\x5f\x7d\x88\xbe\xac\xf4\xae\x7e\x2e\x3b\x8f\xbe\xeb\xca\xa8\x47\xb7\x44\xd7\x23\x0b\x15\x3b\xa0\xaf\xa1\x1d\xb1\xa4\xd5\x02\x8f\x01\x82\x01\x6e\x2d\x6a\x69\x74\x7e\x0b\xda\x10\x8f\x12\xa8\x82\xae\x67\x7b\xe7\xb7\xd8\x30\xb5\x61\xf3\x43\x95\xec\x05\x70\xa8\x79\x81\x54\x98\xa2\xe0\x5a\xc2\xfb\x4f\x93\xcb\x6f\x93\xab\xaf\x97\xef\x3e\x7f\x84\x24\x39\x7e\xbd\x6f\x25\x47\xb2\xb9\x02\xa8\x9b\x35\x6e\x5f\xf6\xb9\x39\x70\xe1\xe4\x94\x08\x7b\x92\x7b\x26\xcb\xc2\x56\xe0\x86\x7b\x9f\x88\xac\x30\x12\xce\xcf\x07\x8d\xf3\x2d\x98\x90\x55\x16\x67\x06\xce\x40\x0b\xa0\x37\x30\x84\xdc\x08\x9e\x67\xc6\x47\xea\xee\x86\x03\xde\xee\xc6\xe9\x0d\x48\x03\x3e\xc7\xc8\xd4\x70\x50\x19\x1a\x37\x23\x7e\xed\x4c\x24\xd0\xfb\x2f\x81\x87\xd2\x57\xc4\xee\x4a\xb6\xb1\x50\x3e\x47\xbf\x29\xb5\x22\x7b\x4d\xb3\xc8\x15\xd0\x0c\x86\xa3\x57\xfd\x41\xfc\x0f\x81\xda\x46\x5e\xca\x77\xe6\x4a\x82\xd2\x33\x03\xbf\xa1\x1e\x93\x6e\x7c\xb0\xd4\xe1\xca\xa9\x80\xa9\xd2\xa9\xdd\x64\xef\xf6\xc8\x93\xe7\xdd\x27\x96\xd8\xe7\xd2\x66\xa9\xa3\xdc\xe1\x3b\x24\xed\x66\x49\x09\x8c\xc7\xf1\xf0\x21\x52\x12\xf8\x41\xa4\x21\x10\x7f\xcf\xa6\x8d\xaa\x98\xcd\x3c\x91\x7a\x9a\xfe\x79\x2d\x3c\x28\xff\xa8\xf7\x7b\xcb\xe0\xbf\xe5\xdf\xd4\xf7\x89\x4d\x71\x38\xdb\x56\xe6\xa7\x14\xfd\x58\xdc\x6e\xeb\x93\xbf\x01\x00\x00\xff\xff\x5d\xe2\x8e\xbf\x77\x06\x00\x00")

func scriptsRestorededicatedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestorededicatedSh,
		"scripts/restoreDedicated.sh",
	)
}

func scriptsRestorededicatedSh() (*asset, error) {
	bytes, err := scriptsRestorededicatedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreDedicated.sh", size: 1655, mode: os.FileMode(420), modTime: time.Unix(1460041627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRestoresharedSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5d\x4f\xdb\x4a\x10\x7d\xcf\xaf\x18\x8c\x45\x2e\x48\xce\x12\x1e\xb8\xba\xe2\x06\xa9\x15\x50\x21\x55\x2d\xa2\x95\xfa\x80\x50\xb4\xf1\x8e\xe3\x55\xec\xdd\x65\x77\x93\x80\xda\xfe\xf7\x8e\x6d\x92\xac\x43\x0a\xa9\x44\x25\x36\x0f\xc9\xc4\x67\xce\x7c\x78\xe6\xd8\xbb\x3b\x6c\x24\x15\x1b\x71\x97\x77\x3c\xb7\x63\xf4\x43\x21\xed\x80\xcd\xb8\x65\xb3\x94\x1b\xe6\xbc\xb6\xc8\xd2\x2c\xb1\x28\xa4\x4b\x46\x56\x4f\xd0\xb2\xc6\x10\xdc\x73\xd6\x49\x05\xac\xc3\x7d\x69\x86\x23\x9e\x4e\xa6\x86\xc1\xde\x1e\x10\x31\xdc\xcf\xb2\xe7\x60\x0d\xa1\x97\x05\xf6\x2a\xf4\x29\x30\x81\x33\xa6\xa6\x45\x01\x47\xa7\x7b\xfd\x4e\xa6\x2d\x5c\x5c\x7e\x3c\x07\xa9\x5e\xa6\xa9\xf3\x3a\x38\x01\xa1\x3b\x40\x47\x66\x70\x73\x03\x89\x80\xb8\x66\xb8\xbd\x3d\x01\x9f\xa3\xaa\xaf\xd1\xa1\x7a\x31\x25\xa2\x87\x4f\xbc\xc4\x41\xfc\x0f\xf5\x02\x15\xfd\x6c\xe0\xfb\x0b\x98\x54\xce\xf3\xa2\x38\xa3\xee\xc4\xab\x4e\xc5\x2d\xef\x25\x96\x22\x56\x01\xa3\x78\xe5\x15\xc1\x5a\x5c\x3a\x98\xe6\x1a\xa2\x6b\xac\xea\x90\x6a\x0c\x6d\xb6\x28\x40\xd6\x85\x0d\x8d\xb6\x9e\x32\xe4\xf3\x09\x74\x59\x65\xb0\xef\x86\x1c\x3d\xc4\x47\x3f\xbb\x10\x04\x6b\x1a\xd1\x4b\xb5\xca\xf6\x9f\xb2\xcc\xc5\x92\xc4\xe2\xdd\x94\x62\x1a\xee\xdc\x1f\x72\x5d\x5d\x9e\x11\x4b\xca\xfd\x53\x6c\xe2\xd0\xce\xd0\xf6\x8c\x14\xa1\xc7\x44\xd2\xdd\x4c\xfe\x83\x98\x5c\xc3\xa4\x4a\x48\x6c\xf6\x2c\x4b\x80\xde\xdd\x05\x87\x1e\xbc\x06\x6e\x0c\x2a\xa1\x55\xf1\x00\x4a\x07\x08\x87\x02\x12\x09\x5d\xc7\x02\xc4\x03\xb6\x4c\xa5\xd9\xf8\x77\x45\x6e\xa4\xb2\xf5\x48\x24\xa9\x2e\x4b\xae\x04\xbc\xff\x70\x7d\xfe\xed\xfa\xf2\xeb\xf9\xbb\xcf\x17\x10\x45\xcf\x5f\x0e\xad\x68\xab\xb8\x1b\x5a\x22\x46\xec\x20\x40\xa4\x66\xcb\x35\x68\x8f\x54\x45\x23\xa6\xa5\xe9\x59\x31\x5a\xa7\xef\x85\xf4\x79\xa9\x05\x1c\x1f\x1f\xae\x83\x16\xce\x9d\x00\x3c\xcf\x69\x6d\x61\x07\x54\x0a\xc9\x1d\xf4\xa1\xd0\x29\x2f\x72\xed\x68\x32\x56\x63\x0b\xff\x2f\x37\xba\x5a\x4c\x70\x05\xa2\x81\xfe\x61\x65\x28\x0c\xd8\x9a\xdd\xba\xb2\x7a\x6c\xd1\xb9\x2f\x9e\xfb\xa9\xa3\x41\x5b\x55\x6b\xa8\x46\x3e\x46\xd7\x54\x59\xcb\x57\x53\x6f\x5a\x48\x48\x72\xe8\x1f\xfd\xdb\x3b\xa4\x4f\x1f\x12\xd3\xca\x20\xe1\x4b\x73\x2e\x68\x9f\x33\x0d\x3f\x80\xa2\x18\xe8\x72\x9d\x0d\x2d\xce\xad\xf4\x38\x94\x6a\x68\x1e\xa3\x77\xc3\xf1\x7d\xf5\x0c\xc2\xb9\x08\xe2\x98\xb7\x57\xfa\x54\x91\x32\x93\xa4\x45\x71\x3b\xb9\x08\x06\x03\xfa\x73\xd3\x2d\x23\xb9\x0b\x08\x44\xb8\xa0\x6f\xb2\x44\x58\x4c\x64\x2b\x6b\x9a\xcc\xbf\x21\x79\x1b\x25\x8a\x34\x69\x4d\xb0\x5e\x51\xa2\xda\x1a\xf4\x82\x9a\xbd\x18\x17\x0b\x87\x4f\x1e\x63\x81\x0b\x75\x0e\x9d\xea\x7a\xc0\x7b\xe9\xfc\xf2\x39\x96\xc9\xce\xe3\x57\xdd\xd9\x47\x95\xdb\x4a\xc7\xb6\x06\x2f\x5e\x21\x3a\xbf\x02\x00\x00\xff\xff\xa3\xba\x4a\x39\xda\x08\x00\x00")

func scriptsRestoresharedShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRestoresharedSh,
		"scripts/restoreShared.sh",
	)
}

func scriptsRestoresharedSh() (*asset, error) {
	bytes, err := scriptsRestoresharedShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/restoreShared.sh", size: 2266, mode: os.FileMode(420), modTime: time.Unix(1460041633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/backupDedicated.sh": scriptsBackupdedicatedSh,
	"scripts/backupShared.sh": scriptsBackupsharedSh,
	"scripts/restoreDedicated.sh": scriptsRestorededicatedSh,
	"scripts/restoreShared.sh": scriptsRestoresharedSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"backupDedicated.sh": &bintree{scriptsBackupdedicatedSh, map[string]*bintree{}},
		"backupShared.sh": &bintree{scriptsBackupsharedSh, map[string]*bintree{}},
		"restoreDedicated.sh": &bintree{scriptsRestorededicatedSh, map[string]*bintree{}},
		"restoreShared.sh": &bintree{scriptsRestoresharedSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

